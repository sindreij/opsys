/**
 * This class implements a queue of customers as a circular buffer.
 */
public class CustomerQueue {
	private Customer[] array;
	private int length;
	private int tail = 0; //The position where the last customer which was pulled was
	private int head = 0; //The position where the last customer was pushed
	private Gui gui;
	/**
	 * Creates a new customer queue.
	 * @param queueLength	The maximum length of the queue.
	 * @param gui			A reference to the GUI interface.
	 */
    public CustomerQueue(int queueLength, Gui gui) {
    	array = new Customer[queueLength];
    	this.length = queueLength;
    	this.gui = gui;
	}
    
    private int getNext(int pos) {
    	if (pos + 1 < length) {
    		pos = head + 1;
    	} else {
    		pos = 0;
    	}
    	return pos;
    }
    
    public synchronized void push(Customer customer) throws InterruptedException {
    	int nexthead = getNext(head);

    	if (nexthead == tail) {
    		gui.println("Doorman is waiting");
    		wait();
    		//Ting kan ha endret seg
    		nexthead = getNext(head);
    		gui.println("Doorman is finished waiting");
    	}
    	head = nexthead;
    	setCustomer(head, new Customer());
    	gui.println("Head: " + head + ". Tail: " + tail)
    }
    
    private void setCustomer(int pos, Customer customer) {
    	array[pos] = customer;
    	gui.fillLoungeChair(pos, customer);
    }
    
    
}
