public class Cpu {
    private Queue cpuQueue;
    private Statistics statistics;
    private Gui gui;
    private Process currentProcess;

    public Cpu(Queue cpuQueue, Gui gui, Statistics statistics) {
        this.gui = gui;
        this.cpuQueue = cpuQueue;
        this.statistics = statistics;
    }

    public void insertProcess(Process p) {
        cpuQueue.insert(p);
    }
    
    public Process startProcess(long clock) {
    	if (!cpuQueue.isEmpty()) {
    		currentProcess = (Process)cpuQueue.removeNext();
    		currentProcess.startCpu(clock);
    	} else {
    		currentProcess = null;
    	}
    	return currentProcess;
    }
    
    public Process stopProcess(long clock) {
    	if (currentProcess != null) {
    		currentProcess.endCpu(clock);
    	}
    	Process finished = currentProcess;
    	currentProcess = null;
    	gui.setCpuActive(null);
    	return finished;
    }
}